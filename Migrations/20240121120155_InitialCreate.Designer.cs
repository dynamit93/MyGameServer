// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyGameServer;

#nullable disable

namespace MyGameServer.Migrations
{
    [DbContext(typeof(GameContext))]
    [Migration("20240121120155_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("MyGameServer.player.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Account");
                });

            modelBuilder.Entity("MyGameServer.player.Player", b =>
                {
                    b.Property<int>("PlayerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<long>("Balance")
                        .HasColumnType("bigint");

                    b.Property<byte>("Blessings")
                        .HasColumnType("tinyint unsigned");

                    b.Property<int>("Cap")
                        .HasColumnType("int");

                    b.Property<long>("Experience")
                        .HasColumnType("bigint");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<int>("Health")
                        .HasColumnType("int");

                    b.Property<int>("HealthMax")
                        .HasColumnType("int");

                    b.Property<long>("LastLogin")
                        .HasColumnType("bigint");

                    b.Property<long>("LastLogout")
                        .HasColumnType("bigint");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<int>("LookAddons")
                        .HasColumnType("int");

                    b.Property<int>("LookBody")
                        .HasColumnType("int");

                    b.Property<int>("LookFeet")
                        .HasColumnType("int");

                    b.Property<int>("LookHead")
                        .HasColumnType("int");

                    b.Property<int>("LookLegs")
                        .HasColumnType("int");

                    b.Property<int>("Mana")
                        .HasColumnType("int");

                    b.Property<int>("ManaMax")
                        .HasColumnType("int");

                    b.Property<long>("ManaSpent")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("PosX")
                        .HasColumnType("int");

                    b.Property<int>("PosY")
                        .HasColumnType("int");

                    b.Property<int>("PosZ")
                        .HasColumnType("int");

                    b.Property<byte>("Save")
                        .HasColumnType("tinyint unsigned");

                    b.Property<int>("Sex")
                        .HasColumnType("int");

                    b.Property<int>("SkillAxe")
                        .HasColumnType("int");

                    b.Property<long>("SkillAxeTries")
                        .HasColumnType("bigint");

                    b.Property<int>("SkillClub")
                        .HasColumnType("int");

                    b.Property<long>("SkillClubTries")
                        .HasColumnType("bigint");

                    b.Property<int>("SkillDist")
                        .HasColumnType("int");

                    b.Property<long>("SkillDistTries")
                        .HasColumnType("bigint");

                    b.Property<int>("SkillFishing")
                        .HasColumnType("int");

                    b.Property<long>("SkillFishingTries")
                        .HasColumnType("bigint");

                    b.Property<int>("SkillFist")
                        .HasColumnType("int");

                    b.HasKey("PlayerId");

                    b.HasIndex("AccountId");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("MyGameServer.player.Player_Items", b =>
                {
                    b.Property<int>("Sid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<byte[]>("Attributes")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.Property<short>("Count")
                        .HasColumnType("smallint");

                    b.Property<short>("ItemType")
                        .HasColumnType("smallint");

                    b.Property<int>("Pid")
                        .HasColumnType("int");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.HasKey("Sid");

                    b.HasIndex("PlayerId");

                    b.ToTable("PlayerItems");
                });

            modelBuilder.Entity("MyGameServer.player.Player", b =>
                {
                    b.HasOne("MyGameServer.player.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("MyGameServer.player.Player_Items", b =>
                {
                    b.HasOne("MyGameServer.player.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });
#pragma warning restore 612, 618
        }
    }
}
